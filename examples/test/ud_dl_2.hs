-- Attempt to recode the 2nd exercise from the Udacity Deep Learning
-- course from Python to Haskell, using the new machinery in concat.
--
-- Original author: David Banas <capn.freako@gmail.com>
-- Original date:   August 31, 2017
--
-- Copyright (c) 2017 David Banas; all rights reserved World wide.
-----------------------------------------------------------------------
-- To run:
--
--   stack build :tst-dl2
--
-- You might also want to use stack's --file-watch flag for automatic recompilation.

module Main where

import ConCat.AD   (gradient)
import ConCat.Misc (R)

f :: R -> R
f x = 2 * x + 1

-- instance HasV R R where
--   -- type V R R :: * -> *
--   type V R R = (->)

runHaskell' :: String -> (a -> b) -> IO ()
runHaskell' _ _ = error "runHaskell' called directly"
{-# NOINLINE runHaskell' #-}
{-# RULES "runHaskell'"
  forall n f. runHaskell' n f = runHaskell n $ ccc f #-}

runHaskell :: String -> (a -> b) -> IO ()
runHaskell name func = genHaskell name func

effectHaskell :: String -> (a -> b) -> String
effectHaskell name func = unlines
  [ "-- Automatically generated Haskell code. Do not edit."
  , "--"
  , "-- This code was generated by the Haskell ConCat library, via compiling to categories."
  , ""
  , "-- " ++ (show name)
  , "--"
  , showFunc func
  ]

showFunc :: (a -> b) -> String
showFunc (\x -> expr) = "x = " ++ show expr

genHaskell :: String -> (a -> b) -> IO ()
genHaskell name func =
  do createDirectoryIfMissing False outDir
     let o = outFile name
     writeFile o (effectHaskell name func)
     putStrLn ("Wrote " ++ o)

outDir :: String
outDir = "out"

outFile :: String -> String
outFile name = outDir++"/"++name++".v"

main :: IO ()
main = genHaskell "gradient" (gradient f)

